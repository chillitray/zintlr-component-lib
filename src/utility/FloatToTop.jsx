import React, { useState, useRef, useLayoutEffect } from 'react';
import { createPortal } from 'react-dom';

/**
 * Generated By Gpt - Dont touch it
 * FloatToTop - A component that floats its children to the top of the DOM
 * while maintaining position relative to its original location without affecting layout
 *
 * @param {object} props
 * @param {React.ReactNode} props.children - The component to float
 * @param {boolean} props.enabled - Whether floating is enabled (optional)
 */
const FloatToTop = ({ children, enabled = true }) => {
  const [position, setPosition] = useState({ top: 0, left: 0 });
  const [childDimensions, setChildDimensions] = useState({ width: 0, height: 0 });
  const originalRef = useRef(null);
  const floatingRef = useRef(null);
  const childRef = useRef(null);

  // First, measure the original child dimensions to preserve layout
  useLayoutEffect(() => {
    if (!childRef.current) return;

    const { offsetWidth, offsetHeight } = childRef.current;
    setChildDimensions({ width: offsetWidth, height: offsetHeight });
  }, [children]);

  // Set up position tracking
  useLayoutEffect(() => {
    if (!enabled || !originalRef.current) return;

    const updatePosition = () => {
      if (!originalRef.current) return;

      const rect = originalRef.current.getBoundingClientRect();

      setPosition({
        top: rect.top + window.scrollY,
        left: rect.left + window.scrollX,
      });
    };

    // Initial position
    updatePosition();

    // Update position on scroll and resize
    window.addEventListener('scroll', updatePosition, true);
    window.addEventListener('resize', updatePosition);

    return () => {
      window.removeEventListener('scroll', updatePosition, true);
      window.removeEventListener('resize', updatePosition);
    };
  }, [enabled, childDimensions]);

  if (!enabled) {
    return children;
  }

  return (
    <>
      <div
        ref={originalRef}
        style={{
          display: 'fixed',
          width: `${childDimensions.width}px`,
          height: `${childDimensions.height}px`,
          opacity: 0,
          pointerEvents: 'none',
        }}
      />
      {createPortal(
        <div
          ref={floatingRef}
          style={{
            position: `${position.top && position.left && 'absolute'}`,
            top: `${position.top}px`,
            left: `${position.left}px`,
            zIndex: 99999,
            pointerEvents: 'auto',
          }}
        >
          {children}
        </div>,
        document.body
      )}
    </>
  );
};

export default FloatToTop;
